{
	"proc foo":{
		"scope":"nim",
		"prefix":"proc foo",
		"body":[
			"proc foo*()=",
			"",
			"foo()"
		]
	},
	"header":{
		"scope":"nim",
		"prefix":"header",
		"body":[
			"include atcoder/${1|header,extra/header/chaemon_header|}",
			"let"
			"\t${2:var}=next${3|Int,String,Float|}()"
		]
	},
	"chaemon header":{
		"scope":"nim",
		"prefix":"chaemon header",
		"body":["include atcoder/${1|extra/header/chaemon_header,header|}"]
	},
	"import":{
		"scope":"nim",
		"prefix":"import heapqueue/matrix/bitutils",
		"body":["import ${1|heapqueue,atcoder/extra/math/matrix,atcoder/extra/other/bitutils|}"]
	},
	"modint":{
		"scope":"nim",
		"prefix":"modint",
		"body":[
			"import atcoder/modint",
			"type mint=modint${1|998244353,1000000007|}"
		]
	},
	"modint val":{
    "scope":"nim",
    "prefix":"modint val",
    "body":["${1:x}.val()"]
  },
  "modint pow":{
    "scope":"nim",
    "prefix":"modint pow",
    "body":["${1:x}.pow(${2:n})"]
  },
  "modint inv":{
    "scope":"nim",
    "prefix":"modint inv",
    "body":["${1:x}.inv()"]
  },
	"toBitStr":{
		"scope":"nim",
		"prefix":"toBitStr",
		"body": ["toBitStr"]
	},
	"nextInt/String/Float":{
		"scope":"nim",
		"prefix":"nextInt/String/Float",
		"body":["next${1|Int,String,Float|}()"]
	},
	"multiple nextInt/String/Float":{
		"scope":"nim",
		"prefix":"multiple nextInt/String/Float",
		"body":["Seq[${1:N}:next${2|Int,String,Float|}()]"]
	},
	"inf":{
		"scope":"nim",
		"prefix":"inf",
		"body":["${1|int,float|}.inf"]
	},
  "PI":{
    "scope":"nim",
    "prefix":"PI",
    "body":["PI"]
  },
	"readLine":{
		"scope":"nim",
		"prefix":"readLine",
		"body":["stdin.readLine"]
	},
	"multiple readLine":{
		"scope":"nim",
		"prefix":"multiple readLine",
		"body":["newSeqWith(${2:N},stdin.readLine)"]
	},
	"split":{
		"scope":"nim",
		"prefix":"split",
		"body":["split"]
	},
	"parseInt/Float":{
		"scope":"nim",
		"prefix":"parseInt/Float",
		"body":["parse${1|Int,Floaat|}"]
	},
	"char to int":{
		"scope":"nim",
		"prefix":"char to int",
		"body":["${1:char}.parseInt"]
	},
	"int to char":{
		"scope":"nim",
		"prefix":"int to char",
		"body":["${1:n}[0]"]
	},
	"len":{
		"scope":"nim",
		"prefix":"len",
		"body":["len"]
	},
	"repeat":{
		"scope":"nim",
		"prefix":"repeat",
		"body":["repeat($0)"]
	},
	"replace":{
		"scope":"nim",
		"prefix":"replace",
		"body":["replace(\"${1:str}\",\"${2:str}\")"]
	},
	"delete":{
		"scope":"nim",
		"prefix":"dbelete",
		"body":["delete(${1:first},${2:last})"]
	},
	"toLower/UpperAscii":{
		"scope":"nim",
		"prefix":"toLower/UpperAscii",
		"body":["to${1|Lower,Upper|}Ascii"]
	},
	"starts/continues/endsWith":{
		"scope":"nim",
		"prefix":"starts/continues/endsWith",
		"body":["${1|starts,continues,ends|}With"]
	},
	"pattern match":{
		"scope":"nim",
		"prefix":"pattern match",
		"body":["match(re\"${1:pattern}\")"]
	},
	"sorted":{
		"scope":"nim",
		"prefix":"sorted",
		"body":["sorted${1:(Descending)}"]
	},
	"reversed":{
		"scope":"nim",
		"prefix":"reversed",
		"body":["reversed"]
	},
	"find":{
		"scope":"nim",
		"prefix":"find",
		"body":["find($0)"]
	},
	"count":{
		"scope":"nim",
		"prefix":"count",
		"body":["count($0)"]
	},
	"tuple":{
		"scope":"nim",
		"prefix":"tuple",
		"body":["tuple[${1:name}:${2:T}]"]
	},
	"sortedByIt":{
		"scope":"nim",
		"prefix":"sortedByIt",
		"body":["sortedBuIt(it.${1:name})"]
	},
	"Seq":{
		"scope":"nim",
		"prefix":"Seq",
		"body":["Seq[${1:len}${2:,len}:${3:val}]"]
	},
	"nil seq":{
		"scope":"nim",
		"prefix":"nil seq",
		"body":[" @${1:type}"]
	},
	"newSeq":{
		"scope":"nim",
		"prefix":"newSeq",
		"body":["newSeq[${1:T}](${2:len})"]
	},
	"newSeqWith":{
		"scope":"nim",
		"prefix":"newSeqWith",
		"body":["newSeqWith(${1:n},${2:val})"]
	},
	"toSeq":{
		"scope":"nim",
		"prefix":"toSeq",
		"body":["toSeq"]
	},
	"reset":{
		"scope":"nim",
		"prefix":"reset",
		"body":["reset"]
	},	
	"setLen":{
		"scope":"nim",
		"prefix":"setLen",
		"body":["setLen(${1:val})"]
	},
	"fill":{
		"scope":"nim",
		"prefix":"fill",
		"body":["fill(${1:val}${2:,first,last})"]
	},
	"add":{
		"scope":"nim",
		"prefix":"add",
		"body":["add(${1:val})"]
	},
	"insert":{
		"scope":"nim",
		"prefix":"insert",
		"body":["insert(${1:seq},${2:n})"]
	},
	"concat":{
		"scope":"nim",
		"prefix":"concat",
		"body":["concat(${1:seq})"]
	},
	"sum":{
		"scope":"nim",
		"prefix":"sum",
		"body":["sum"]
	},
	"sum 2D":{
		"scope":"nim",
		"prefix":"sum 2D",
		"body":["${1:seq}.mapIt(sum(it)).sum"]
	},
	"lower/upperBound":{
		"scope":"nim",
		"prefix":"lower/upperBound",
		"body":["${1|lower,upper|}Bound(${2:val})"]
	},
	"deduplicate":{
		"scope":"nim",
		"prefix":"deduplicate",
		"body":["deduplicate"]
	},
	"map/apply":{
		"scope":"nim",
		"prefix":"map/apply",
		"body":["${1|map,apply|}($0)"]
	},
	"foldl/r":{
		"scope":"nim",
		"prefix":"foldl/r",
		"body":["fold${1|l,r|}(${2:f}(a,b))"]
	},
	"map/applyIt":{
		"scope":"nim",
		"prefix":"map/apply/filterIt",
		"body": ["${1|map,apply,filter|}It(it$2)"]
	},
	"filterIt":{
		"scope":"nim",
		"prefix":"filterIt",
		"body": ["filterIt(it$1)"]
	},
	"collect":{
		"scope":"nim",
		"prefix":"collect",
		"body": [
			"(block: collect(newSeq):",
			"\tfor i in 0..N:",
			"\t\t)"
		]
	},
	"all/anyIt":{
		"scope":"nim",
		"prefix":"all/anyIt",
		"body":["${1|all,any|}It(it$2)"]
	},
	"countup/down":{
		"scope":"nim",
		"prefix":"countup/down",
		"body":["count${1|up,down|}(${2:start},${3:end},${4:step})"]
	},
	"transpose":{
		"scope":"nim",
		"prefix":"transpose",
		"body":["block: collect(newSeq): (for i in 0..n<<1: ${1:seq}.mapIt(it[i]))"]
	},
	"toDeque/HeapQueue":{
		"scope":"nim",
		"prefix":"toDeque/HeapQueue",
		"body":["to${1|Deque,HeapQueue|}"]
	},
	"addFirst/Last":{
		"scope":"nim",
		"prefix":"addFirst/Last",
		"body":["add${1|First,Last|}(${2:val})"]
	},
	"popFirst/Last":{
		"scope":"nim",
		"prefix":"popFirst/Last",
		"body":["pop${1|First,Last|}"]
	},
	"toHashSet/OrderdSet":{
		"scope":"nim",
		"prefix":"toHashSet/OrderdSet",
		"body":["to${1|HashSet,OrderdSet|}"]
	},
	"incl/excl":{
		"scope":"nim",
		"prefix":"incl/excl",
		"body":["${1|incl,excl|}(${2:val})"]
	},
	"contains":{
		"scope":"nim",
		"prefix":"contains",
		"body":["contains(${1:val})"]
	},
	"in/notin":{
		"scope":"nim",
		"prefix":"in/notin",
		"body":["${1|in,notin|}"]
	},
	"intersection":{
		"scope":"nim",
		"prefix":"intersection",
		"body":["*"]
	},
	"union":{
		"scope":"nim",
		"prefix":"union",
		"body":["+"]
	},
	"difference":{
		"scope":"nim",
		"prefix":"difference",
		"body":["-"]
	},
	"newTable":{
		"scope":"nim",
		"prefix":"newTable",
		"body":["newTable[${1:T},${2:T}]()"]
	},
	"keys/values/pairs":{
		"scope":"nim",
		"prefix":"keys/values/pairs",
		"body":["${1|keys,values,pairs|}"]
	},
	"hasKey":{
		"scope":"nim",
		"prefix":"hasKey",
		"body":["hasKey(${1:key})"]
	},
	"hasKeyOrPut":{
		"scope":"nim",
		"prefix":"hasKeyOrPut",
		"body":["hasKeyOrPut(${1:key},${2:val})"]
	},
	"^":{
		"scope":"nim",
		"prefix":"^",
		"body":["^"]
	},
	"fac":{
		"scope":"nim",
		"prefix":"fac",
		"body":["fac"]
	},
	"floor/round/ceil":{
    "scope":"nim",
    "prefix":"floor/round/ceil",
    "body":["${1|floor,round,ceil|}"]
  },
  "floor/ceilDev":{
    "scope":"nim",
    "prefix":"floor/ceilDev",
    "body":["${1|floor,ceil|}Div"]
  },
  "sin/cos/tan":{
    "scope":"nim",
    "prefix":"sin/cos/tan",
    "body":["${1:radian}.${2|sin,cos,tan|}"]
  },
  "arcsin/cos/tan":{
    "scope":"nim",
    "prefix":"arcsin/cos/tan",
    "body":["arc${1|sin,cos,tan|}"]
  },
  "radToDeg/degToRad":{
    "scope":"nim",
    "prefix":"radToDeg/degToRad",
    "body":["${1|radToDeg,degToRad|}"]
  },
	"abs":{
		"scope":"nim",
		"prefix":"abs",
		"body":["abs($0)"]
	},
	"toInt/Float":{
		"scope":"nim",
		"prefix":"toInt/Float",
		"body":["to${1|Int,Float|}"]
	},
	"max/min=":{
		"scope":"nim",
		"prefix":"max/min=",
		"body":["${1|max,min|}="]
	},
	"gcd/lcm":{
		"scope":"nim",
		"prefix":"gcd/lcm",
		"body":["${1|gcd,lcm|}(${2:a},${3:b})"]
	},
	"toBin":{
		"scope":"nim",
		"prefix":"toBin",
		"body":["toBin(${1:len})"]
	},
	"fromBin":{
		"scope":"nim",
		"prefix":"fromBin",
		"body":["fromBin[int](${1:n})"]
	},	
	"N-adic number":{
		"scope":"nim",
		"prefix":"N-adic number",
		"body":[
      "var a:seq[int]",
			"while n>0: a.insert(n%b,0); n//=b"
    ]
	},
	"for":{
		"scope":"nim",
		"prefix":"for",
		"body":[
      "for ${1:i} in ${2:0}..${3:<}${4:N}:",
      "\t$0"
    ]
	},
	"block":{
		"scope":"nim",
		"prefix":"block",
		"body":["block"]
	},
  "Knapsack DP":{
    "scope":"nim",
    "prefix":"Knapsack DP",
    "body":[
      "for i in 0..<N:",
			"\tfor j in countdown(W,w[i]):",
      "\t\tdp[j].max=dp[j-w[i]]+v[i]",
      "echo dp[W]"
		]
	},
	"Unbounded Knapsack DP":{
    "scope":"nim",
    "prefix":"Unbounded Knapsack DP",
    "body":[
      "for i in 0..<N:",
			"\tfor j in w[i]..W:",
      "\t\tdp[j].max=dp[j-w[i]]+v[i]",
      "echo dp[W]"
		]
	},
	"initGraph":{
		"scope":"nim",
		"prefix":"initGraph",
		"body":[
			"import atcoder/extra/graph/graph_template"
			"var g=initGraph(N)",
			"for _ in 1..M:",
			"\tlet u,v,w=nextInt()",
			"\tg.add${1|Edge,BiEdge|}(u,v,w)"]
	},
	"initDirected/UnDirectedGraph":{
		"scope":"nim",
		"prefix":"initDirected/UnDirectedGraph",
		"body":[
			"import atcoder/extra/graph/graph_template"
			"var g=init${1|Directed,UnDirected|}Graph(N,${2:u:seq},${3:v:seq},${4:w:seq})"
		]
	},
	"Depth-First Serch":{
		"scope":"nim",
		"prefix":"Depth-First Serch",
		"body":[
			"var d=Seq[N:true]",
			"proc f(i:int)=",
			"\td[i]=false",
			"\tfor j in g[i]:",
			"\t\tif d[j.dst]: f(j.dst)"
		]
	},
  "Breadth-First Serch":{
    "scope":"nim",
    "prefix":"Breadth-First Serch",
    "body":[
      "var",
			"\tq=[0].toDeque",
			"\td=Seq[N:true]",
			"while q.len>0:",
      "\tvar i=q.popFirst; d[i]=false",
			"\tfor j in g[i]:",
			"\t\tif d[j.dst]: q.addLast(j.dst)"
    ]
  },
  "warshallFloyd":{
    "scope":"nim",
    "prefix":"warshallFloyd",
    "body":[
			"import atcoder/extra/graph/warshall_floyd",
      "var g=Seq[N,N:int.inf]",
			"for _ in 1..M:",
			"\tlet u,v,w=nextInt()",
			"\tg[u-1][v-1]=w",
      "var d=g.warshallFloyd",
      "echo d[s,t]",
      "echo d.path(s,t)"
    ]
  },
  "topologicalSort":{
    "scope":"nim",
    "prefix":"topologicalSort",
    "body":[
			"import atcoder/extra/graph/topological_sort",
      "var a=g.topologicalSort"
    ]
  },
  "Disjoint Set Union(Union-Find) constructor":{
    "scope":"nim",
    "prefix":"Disjoint Set Union(Union-Find) constructor",
    "body":[
			"import atcoder/dsu",
			"var ${1:d}=initDSU(${2:N})"
		]
  },
  "Disjoint Set Union(Union-Find) marge":{
    "scope":"nim",
    "prefix":"Disjoint Set Union(Union-Find) marge",
    "body":["merge(${1:u},${2:v})"]
  },
  "Disjoint Set Union(Union-Find) same":{
    "scope":"nim",
    "prefix":"Disjoint Set Union(Union-Find) same",
    "body":["same(${1:u},${2:v})"]
  },
  "Disjoint Set Union(Union-Find) leader":{
    "scope":"nim",
    "prefix":"Disjoint Set Union(Union-Find) leader",
    "body":["leader(${1:i})"]
  },
  "Disjoint Set Union(Union-Find) size":{
    "scope":"nim",
    "prefix":"Disjoint Set Union(Union-Find) size",
    "body":["size(${1:i})"]
  },
  "eratosthenes constructor":{
    "scope":"nim",
    "prefix":"eratosthenes constructor",
    "body":[
			"import atcoder/extra/math/eratosthenes",
			"var ${1:e}=initEratosthenes(${2:N})"
		]
  },
  "eratosthenes factor":{
    "scope":"nim",
    "prefix":"eratosthenes factor",
    "body":["${1:e}.factor(${2:n})"]
  },
  "eratosthenes divior":{
    "scope":"nim",
    "prefix":"eratosthenes divisor",
    "body":["${1:e}.divisor(${2:n})"]
  },
	"nextPermutation":{
		"scope":"nim",
		"prefix":"nextPermutation",
		"body":[
			"while true:",
			"\t",
			"\tif not ${1:arr}.nextPermutation(): break"]
	},
  "sentinel":{
    "scope":"nim",
    "prefix":"sentinel",
    "body":[
			"var m=newSeqWith(H,\"#\"&nextString()&\"#\")",
      "for i in [0,H+1]: A.insert(\"#\".repeat(W+1),i)"
    ]
  },
  "direction":{
    "scope":"nim",
    "prefix":"direction",
    "body":[
      "import atcoder/extra/other/direction",
      "for (ni,nj) in (i,j).neighbor(${1|dir4,dir8|},[0..H],[0..W]):"
    ]
  },
	"echo":{
		"scope":"nim",
		"prefix":"echo",
		"body":["echo"]
	},
	"join":{
		"scope":"nim",
		"prefix":"join",
		"body":["join($1)"]
	},
	"Yes or No":{
		"scope":"nim",
		"prefix":"Yes or No",
		"body":["echo (if ${1:bool}: \"Yes\" else: \"No\")"]
	},
	"quit":{
		"scope":"nim",
		"prefix":"quit",
		"body":["quit()"]
	},
	"dump":{
		"scope":"nim",
		"prefix":"dump",
		"body":["dump($0)"]
	},
}